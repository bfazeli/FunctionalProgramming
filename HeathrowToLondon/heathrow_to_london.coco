# from pyrsistent import m, pmap, v, pvector
# from toolz import interleave, accumulate, last, concat, take, drop
# from operator import add
# from collections import namedtuple
# from dataclasses import dataclass


# @dataclass
data Step(label, distance):
    def __abs__(self) =
        (label, distance)
        
        
def runProg(input: [int]) -> ([int], [int]):
    bestPaths = (3, input) |*> groupsOf |> optimalPath |> list
    
    return bestPaths


def optimalPath(threes: [[int]]) -> ([Step], [Step]):
    return threes |> reduce$(roadStep)


def roadStep(tuple: ([Step], [Step]), section: [int]) -> ([Step], [Step]):

    priceA = tuple[0] |> map$(step -> step.distance) |> sum
    priceB = tuple[1] |> map$(step -> step.distance) |> sum

    forwardPriceToA = priceA + section[0]
    crossPriceToA = priceB + section[1] + section[2]
    forwardPriceToB = priceB + section[1]
    crossPriceToB = priceA + section[0] + section[2]

    newPathToA = tuple[0].append(Step(
        "A", section[0])) if forwardPriceToA <= crossPriceToA else tuple[1].extend([Step("B", section[1]), Step("C", section[2])])
    newPathToB = tuple[1].append(Step(
        "B", section[1])) if forwardPriceToB <= crossPriceToB else tuple[0].extend([Step("A", section[0]), Step("C", section[2])])

    return (newPathToA, newPathToB)

def groupsOf(num: int, input: [int]) -> [int]: 
    return [input[i:i+num] for i in range(0, len(input), num)]

[50, 10, 30, 5, 90, 20, 40, 2, 25, 10, 8, 0] |> runProg |> print

